package day03;

/*
 * 3种形式的强制类型转换：
 * 
*a.基本类型之间的强制类型转换，如int到float(在大多数情况下，由于更大的数据类型的精确度比小类型高，所以不会导致信息丢失，
*一种例外情况是将整数转化成浮点数，将int或long转化成float或将long转化成double时，都可能导致精度降低)
*
*b.从一种类的对象强制转化为另一种类的对象，如从Object转换为String
*必须满足以下条件：源类和目标类之间存在继承关系，即其中一个是另一个的子类
*
*除强制转换为某种类外，还可以将对象强制转换为接口，但仅当该对象的类或其超类之一实现了该接口才行。将对象强制转换为接口意味着
*您可以调用该接口的方法，即使该对象的类并没有实现这个接口
*
*c.从基本数据类型强制转换为对象，然后从对象中提取出基本类型值
*在java中，基本类型和对象是完全不同的东西，不会自动在它们之间进行转换
*java.lang包中包含了对应于每种基本数据类型的类:Float,Byte等。这些类通常被称为对象封装器，因为它们提供了基本类型值的对象表示
*使用每个基本类型对应的类，可以创建存储相同值的对象。如：
*Integer datacount = new Integer(7801);
*使用这种方式创建对象后，可像使用其他对象那样使用它（虽然不能修改它的值）。当您想将它作为基本类型值使用时，也有用于实现
*这种目的的方法
*
*讨论强制转换时，以源和目标的方式考虑问题将更容易。源是要被强制转换为另一类型的变量，目标是转换后的结果
*
 */
/**
 * @author 李明
 * @date 2018年10月29日上午10:41:21
 */
public class Convert {
	public static void main(String[] args) {
			
		String pennsyl   =  "6500";
		int  penn = Integer.parseInt(pennsyl);
		//在程序中，常常需要将字符串转换为数字类型，如整数类型。需要int结果时，可以使用Integer类的类方法parseInt（）来实现
		System.out.println(penn);
		
		//自动封装和拆装的例子
		Float f1 = new Float(12.5F);
		Float f2 = new Float(25.5F);
		System.out.println("最小值：" + Math.min(f1, f2));
		//方法Math.min（）接收两个float参数，但在上述示例中，给这个方法传递的是两个Float对象。
		//编译器不会因为这种不一致而报错。相反，它将Float对象拆封为float值，再将其传递min()方法
	}

}
