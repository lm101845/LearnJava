package day05;

 /*
 * @姓名 李明
 * @日期 2018年10月30日下午3:55:55
 * 
 * 变量作用域：当你引用变量时，java从最里面的作用域想外查找其定义
 * 
 * this关键字：有时候，你可能想在方法体中引用当前对象，即其方法被调用的对象，以便将当前对象的的实例变量或当前对象作为参数
 * 传递给其他方法
 * 
 * 方法：除非返回值类型被声明为void,否则方法执行完毕后，将返回某种类型的值。必须在方法的出口点使用关键字return显式的返回某个值
 *
 *分析：在这个类中，有两个名称皆为test的变量。前者是实例变量，被初始化为10；后者时局部变量，值为20.
 *
 *方法printTest()中的局部变量test隐藏了实例变量test。在方法main()调用printTest()时，它显示test的值为20，虽然有一个值为10的实例
 *变量test.为避免这种问题，可以使用this.test来引用实例变量（10），使用test来引用局部变量，但一种更好的办法时尽量避免相同的变量名
 *和定义
 *
 *隐藏性更强的情况是，在子类中重新定义了超类中已有的变量。这可能导致难以发现的bug。例如，你可能调用方法来修改一个实例变量的值，
 *却修改了另一个变量
 *
 *调用接收对象参数的方法时，对象时按引用传递的。您在方法内对该对象所做的任何操作都将影响原来的对象
 *另一方面，基本数据类型是按值传递的
 *
 *
 */
class ScopeTest {
	 int test = 10;
	 
	 void printTest() {
		 int test = 20;
		 System.out.println("Test" + test);	     //20
	 }
	 
	 public static void main(String[] args) {
		 ScopeTest st = new ScopeTest();       
		 st.printTest();
	}

}
