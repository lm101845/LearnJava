package com.atguigu.java1;

/**
 * @Author liming
 * @Date 2022/6/18 10:25
 **/

/**
 * 方法的重写(override / overwrite)
 *
 * 1.重写：子类继承父类以后，可以对父类中【同名同参数】的方法，进行覆盖操作
 *
 * 2.应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。
 *
 * 3. 重写的规定：
 * 			方法的声明： 权限修饰符  返回值类型  方法名(形参列表) throws 异常的类型{
 * 						//方法体
 * 					}
 * 			约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法
 * 		① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同
 *      ② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符
 *      	>特殊情况：子类不能重写父类中声明为private权限的方法
 *      ③ 返回值类型：
 *      	>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void
 *      	>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类
 *      	>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double——不能是int！！！！)
 *		④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候讲）
 *	**********************************************************************
 *		子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）。
 *	    方法前只要加static，就变成了静态方法，【静态方法是不能被重写的】，它是随着类加载而加载的！！！！
 *
 * 面试题：区分方法的重载与重写
 *  —— * 1.定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。
 *  *
 *  *  "两同一不同":同一个类、相同方法名(重写则方法名，形参列表必须一样，方法体肯定要不一致，否则重写无意义)
 *  *            参数列表不同：参数个数不同，参数类型不同
 *  判断是否是重载：
 *  *    跟方法的权限修饰符、返回值类型、形参变量名、方法体【重写则方法体肯定是不一样的】都没有关系！
 */
public class PersonTest {
    public static void main(String[] args) {
        Student s = new Student("计算机科学与技术");
        s.eat();
        s.walk(10);  //这里面walk方法里面的show方法调用的是Person里面的，不是student里面的！！！！
        System.out.println("========================");

        s.study();
        System.out.println(s.info());
        System.out.println("=======================");

        Person p1 = new Person();
        p1.eat();
    }
}
