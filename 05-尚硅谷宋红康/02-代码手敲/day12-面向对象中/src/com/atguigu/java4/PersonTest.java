package com.atguigu.java4;

/**
 * @Author liming
 * @Date 2022/6/18 15:04
 **/

/**
 * 面向对象特征之三：多态性
 *
 * 1.理解多态性：可以理解为一个事物的多种形态。
 * 2.何为多态性：
 *   对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）
 *
 * 3. 多态的使用：虚拟方法调用
 *   有了对象的多态性以后，我们在【编译期】，只能调用父类中声明的方法，但在【运行期】，我们实际执行的是子类重写父类的方法。
 *   总结：编译，看左边；运行，看右边。
 *
 * 4.多态性的使用前提：  ① 类的继承关系  ② 方法的重写
 *
 * 5.对象的多态性，只适用于方法，不适用于属性（【编译和运行都看左边】）——————多态和属性没有一毛钱关系！！！！！！！！！！！！
 *
 * 多态是一个运行时的行为
 *
 * 虚拟方法调用(多态情况下)
 *  子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父
 * 类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法
 * 确定的。
 */
public class PersonTest {
    public static void main(String[] args) {
//        Person p1 = new Person();
//        p1.eat();
//
//        Man man = new Man();
//        man.eat();
//        man.age = 25;
//        man.earnMoney();
//
//        System.out.println("=================================");

        //对象多态性：我们声明了一个变量，当你右边给它提供了一个对象的时候，这个对象体现了多种形态
        //只要是Person的子类，我都可以在右边去new

        //对象的多态性：父类的引用(p2,p3)指向子类的对象(new Man,new Woman)
        //多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类(前提：子类要重写过父类的方法)的方法 ---虚拟方法调用
        Person p2 = new Man();
        //Person p3 = new Woman();
        p2.eat();   //【运行】以后：这个调的是子类重写父类之后的方法   男人多吃肉，长肌肉
        //你点击eat方法，会跑到父类声明的这个方法里面去，所以说编译看左！！！但是实际运行的这个eat方法执行的是子类重写过的方法
        p2.walk();  //男人霸气的走路

        //能否通过p2调用男人特有的方法：earnMoney？？？——不行！！！！！！！！！！！！！！！
        //报错：Cannot resolve method 'earnMoney' in 'Person'
        //显示Person类中没有定义过这个方法(编译的时候，看左边声明的类型，Person类里面有没有这个方法)
        //说明p2能调的只能是Person里面声明过的方法
        //你能点出来的，都要是Person里面声明过的,earnMoney方法Person类里面没有声明过，所以调不了
        //p2.earnMoney();

        //你去找个人来，我要和他/她吃东西(这个人必须要有吃东西的方法)，如果找的是个男人，就多吃；如果找的是女人，就少吃。
        //不同的人吃的方式不一样

        //注：多态不适用于属性！！！所以这里的id是父类的！！！！————而且属性也不存在覆盖一说的！！！！！！！！！！
        System.out.println(p2.id);    //1001
    }
}
